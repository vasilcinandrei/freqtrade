{"version":3,"file":"BacktestingView-0a44f10d.js","sources":["../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultView.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { PeriodicBreakdown } from '@/types';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\nimport { computed, ref } from 'vue';\n\ndefineProps({\n  periodicBreakdown: {\n    type: Object as () => PeriodicBreakdown,\n    required: true,\n  },\n});\nconst periodicBreakdownSelections = [\n  { value: 'day', text: 'Days' },\n  { value: 'week', text: 'Weeks' },\n  { value: 'month', text: 'Months' },\n];\n\nconst periodicBreakdownPeriod = ref<string>('day');\n\nconst periodicBreakdownFields = computed<TableField[]>(() => {\n  return [\n    { key: 'date', label: 'Date' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'loses', label: 'Losses' },\n  ];\n});\n</script>\n\n<template>\n  <b-form-radio-group\n    id=\"order-direction\"\n    v-model=\"periodicBreakdownPeriod\"\n    :options=\"periodicBreakdownSelections\"\n    name=\"radios-btn-default\"\n    size=\"sm\"\n    buttons\n    style=\"min-width: 10em\"\n    button-variant=\"outline-primary\"\n  ></b-form-radio-group>\n  <b-table\n    small\n    hover\n    stacked=\"sm\"\n    :items=\"periodicBreakdown[periodicBreakdownPeriod] as unknown as TableItem[]\"\n    :fields=\"periodicBreakdownFields\"\n  >\n  </b-table>\n</template>\n","<template>\n  <div class=\"container-fluid px-0 backtestresult-container\">\n    <div class=\"row d-flex justify-content-center\">\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\n    </div>\n\n    <div class=\"row text-start ms-0\">\n      <div class=\"row w-100\">\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pe-xl-1\">\n          <b-card header=\"Strategy settings\">\n            <b-table\n              small\n              borderless\n              :items=\"backtestResultSettings\"\n              :fields=\"backtestsettingFields\"\n            >\n            </b-table>\n          </b-card>\n        </div>\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1\">\n          <b-card header=\"Metrics\">\n            <b-table small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            </b-table>\n          </b-card>\n        </div>\n      </div>\n      <b-card header=\"Results per Exit-reason\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"(backtestResult.exit_reason_summary || backtestResult.sell_reason_summary) as unknown as TableItem[]\"\n          :fields=\"perExitReason\"\n        >\n        </b-table>\n      </b-card>\n      <b-card header=\"Results per pair\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"backtestResult.results_per_pair as unknown as TableItem[]\"\n          :fields=\"perPairFields\"\n        >\n        </b-table>\n      </b-card>\n      <b-card\n        v-if=\"backtestResult.periodic_breakdown\"\n        header=\"Periodic breakdown\"\n        class=\"row mt-2 w-100\"\n      >\n        <BacktestResultPeriodBreakdown\n          :periodic-breakdown=\"backtestResult.periodic_breakdown\"\n        ></BacktestResultPeriodBreakdown>\n      </b-card>\n\n      <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n        <TradeList\n          class=\"row trade-history mt-2 w-100\"\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport { StrategyBacktestResult, Trade } from '@/types';\nimport BacktestResultPeriodBreakdown from './BacktestResultPeriodBreakdown.vue';\n\nimport { computed } from 'vue';\nimport {\n  timestampms,\n  formatPercent,\n  formatPrice,\n  humanizeDurationFromSeconds,\n} from '@/shared/formatters';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\n});\n\nconst formatPriceStake = (price) => {\n  return `${formatPrice(price, props.backtestResult.stake_currency_decimals)} ${\n    props.backtestResult.stake_currency\n  }`;\n};\nconst getSortedTrades = (backtestResult: StrategyBacktestResult): Trade[] => {\n  const sortedTrades = backtestResult.trades\n    .slice()\n    .sort((a, b) => a.profit_ratio - b.profit_ratio);\n  return sortedTrades;\n};\n\nconst bestPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[trades.length - 1];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\nconst worstPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[0];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\n\nconst backtestResultStats = computed(() => {\n  // Transpose Result into readable format\n  const shortMetrics =\n    props.backtestResult?.trade_count_short && props.backtestResult?.trade_count_short > 0\n      ? [\n          { metric: '___', value: '___' },\n          {\n            metric: 'Long / Short',\n            value: `${props.backtestResult.trade_count_long} / ${props.backtestResult.trade_count_short}`,\n          },\n          {\n            metric: 'Total profit Long',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_long || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_long_abs)}`,\n          },\n          {\n            metric: 'Total profit Short',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_short || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_short_abs)}`,\n          },\n        ]\n      : [];\n\n  return [\n    {\n      metric: 'Total Profit',\n      value: `${formatPercent(props.backtestResult.profit_total)} | ${formatPriceStake(\n        props.backtestResult.profit_total_abs,\n      )}`,\n    },\n    {\n      metric: 'CAGR',\n      value: `${props.backtestResult.cagr ? formatPercent(props.backtestResult.cagr) : 'N/A'}`,\n    },\n    {\n      metric: 'Sortino',\n      value: `${props.backtestResult.sortino ? props.backtestResult.sortino.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Sharpe',\n      value: `${props.backtestResult.sharpe ? props.backtestResult.sharpe.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Calmar',\n      value: `${props.backtestResult.calmar ? props.backtestResult.calmar.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Expectancy',\n      value: `${\n        props.backtestResult.expectancy ? props.backtestResult.expectancy.toFixed(2) : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Profit factor',\n      value: `${\n        props.backtestResult.profit_factor\n          ? formatPrice(props.backtestResult.profit_factor, 3)\n          : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Total trades / Daily Avg Trades',\n      value: `${props.backtestResult.total_trades} / ${props.backtestResult.trades_per_day}`,\n    },\n    // { metric: 'First trade', value: props.backtestResult.backtest_fi },\n    // { metric: 'First trade Pair', value: props.backtestResult.backtest_best_day },\n    {\n      metric: 'Best day',\n      value: `${formatPercent(props.backtestResult.backtest_best_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_best_day_abs,\n      )}`,\n    },\n    {\n      metric: 'Worst day',\n      value: `${formatPercent(props.backtestResult.backtest_worst_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_worst_day_abs,\n      )}`,\n    },\n\n    {\n      metric: 'Win/Draw/Loss',\n      value: `${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1].wins\n      } / ${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n          .draws\n      } / ${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n          .losses\n      }`,\n    },\n    {\n      metric: 'Days win/draw/loss',\n      value: `${props.backtestResult.winning_days} / ${props.backtestResult.draw_days} / ${props.backtestResult.losing_days}`,\n    },\n\n    {\n      metric: 'Avg. Duration winners',\n      value: humanizeDurationFromSeconds(props.backtestResult.winner_holding_avg_s),\n    },\n    {\n      metric: 'Avg. Duration Losers',\n      value: humanizeDurationFromSeconds(props.backtestResult.loser_holding_avg_s),\n    },\n    { metric: 'Rejected entry signals', value: props.backtestResult.rejected_signals },\n    {\n      metric: 'Entry/Exit timeouts',\n      value: `${props.backtestResult.timedout_entry_orders} / ${props.backtestResult.timedout_exit_orders}`,\n    },\n    {\n      metric: 'Canceled Trade Entries',\n      value: props.backtestResult.canceled_trade_entries ?? 'N/A',\n    },\n    {\n      metric: 'Canceled Entry Orders',\n      value: props.backtestResult.canceled_entry_orders ?? 'N/A',\n    },\n    {\n      metric: 'Replaced Entry Orders',\n      value: props.backtestResult.replaced_entry_orders ?? 'N/A',\n    },\n\n    ...shortMetrics,\n\n    { metric: '___', value: '___' },\n    { metric: 'Min balance', value: formatPriceStake(props.backtestResult.csum_min) },\n    { metric: 'Max balance', value: formatPriceStake(props.backtestResult.csum_max) },\n    { metric: 'Market change', value: formatPercent(props.backtestResult.market_change) },\n    { metric: '___', value: '___' },\n    {\n      metric: 'Max Drawdown (Account)',\n      value: formatPercent(props.backtestResult.max_drawdown_account),\n    },\n    {\n      metric: 'Max Drawdown ABS',\n      value: formatPriceStake(props.backtestResult.max_drawdown_abs),\n    },\n    {\n      metric: 'Drawdown high | low',\n      value: `${formatPriceStake(props.backtestResult.max_drawdown_high)} | ${formatPriceStake(\n        props.backtestResult.max_drawdown_low,\n      )}`,\n    },\n    { metric: 'Drawdown start', value: timestampms(props.backtestResult.drawdown_start_ts) },\n    { metric: 'Drawdown end', value: timestampms(props.backtestResult.drawdown_end_ts) },\n    { metric: '___', value: '___' },\n\n    {\n      metric: 'Best Pair',\n      value: `${props.backtestResult.best_pair.key} ${formatPercent(\n        props.backtestResult.best_pair.profit_sum,\n      )}`,\n    },\n    {\n      metric: 'Worst Pair',\n      value: `${props.backtestResult.worst_pair.key} ${formatPercent(\n        props.backtestResult.worst_pair.profit_sum,\n      )}`,\n    },\n    { metric: 'Best single Trade', value: bestPair.value },\n    { metric: 'Worst single Trade', value: worstPair.value },\n  ];\n});\n\nconst backtestResultSettings = computed(() => {\n  // Transpose Result into readable format\n  return [\n    { setting: 'Backtesting from', value: timestampms(props.backtestResult.backtest_start_ts) },\n    { setting: 'Backtesting to', value: timestampms(props.backtestResult.backtest_end_ts) },\n    {\n      setting: 'BT execution time',\n      value: humanizeDurationFromSeconds(\n        props.backtestResult.backtest_run_end_ts - props.backtestResult.backtest_run_start_ts,\n      ),\n    },\n    { setting: 'Max open trades', value: props.backtestResult.max_open_trades },\n    { setting: 'Timeframe', value: props.backtestResult.timeframe },\n    { setting: 'Timeframe Detail', value: props.backtestResult.timeframe_detail || 'N/A' },\n    { setting: 'Timerange', value: props.backtestResult.timerange },\n    { setting: 'Stoploss', value: formatPercent(props.backtestResult.stoploss, 2) },\n    { setting: 'Trailing Stoploss', value: props.backtestResult.trailing_stop },\n    {\n      setting: 'Trail only when offset is reached',\n      value: props.backtestResult.trailing_only_offset_is_reached,\n    },\n    { setting: 'Trailing Stop positive', value: props.backtestResult.trailing_stop_positive },\n    {\n      setting: 'Trailing stop positive offset',\n      value: props.backtestResult.trailing_stop_positive_offset,\n    },\n    { setting: 'Custom Stoploss', value: props.backtestResult.use_custom_stoploss },\n    { setting: 'ROI', value: props.backtestResult.minimal_roi },\n    {\n      setting: 'Use Exit Signal',\n      value:\n        props.backtestResult.use_exit_signal !== undefined\n          ? props.backtestResult.use_exit_signal\n          : props.backtestResult.use_sell_signal,\n    },\n    {\n      setting: 'Exit profit only',\n      value:\n        props.backtestResult.exit_profit_only !== undefined\n          ? props.backtestResult.exit_profit_only\n          : props.backtestResult.sell_profit_only,\n    },\n    {\n      setting: 'Exit profit offset',\n      value:\n        props.backtestResult.exit_profit_offset !== undefined\n          ? props.backtestResult.exit_profit_offset\n          : props.backtestResult.sell_profit_offset,\n    },\n    { setting: 'Enable protections', value: props.backtestResult.enable_protections },\n    {\n      setting: 'Starting balance',\n      value: formatPriceStake(props.backtestResult.starting_balance),\n    },\n    {\n      setting: 'Final balance',\n      value: formatPriceStake(props.backtestResult.final_balance),\n    },\n    {\n      setting: 'Avg. stake amount',\n      value: formatPriceStake(props.backtestResult.avg_stake_amount),\n    },\n    {\n      setting: 'Total trade volume',\n      value: formatPriceStake(props.backtestResult.total_volume),\n    },\n  ];\n});\nconst perPairFields = computed(() => {\n  return [\n    { key: 'key', label: 'Pair' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'duration_avg', label: 'Avg Duration' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\n\nconst perExitReason = computed(() => {\n  return [\n    { key: 'exit_reason', label: 'Exit Reason' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\nconst backtestResultFields: TableField[] = [\n  { key: 'metric', label: 'Metric' },\n  { key: 'value', label: 'Value' },\n];\n\nconst backtestsettingFields: TableField[] = [\n  { key: 'setting', label: 'Setting' },\n  { key: 'value', label: 'Value' },\n];\n</script>\n\n<style lang=\"scss\" scoped>\n.backtestresult-container {\n  @media (min-width: 1200px) {\n    max-width: 1200px;\n  }\n}\n</style>\n","<template>\n  <div class=\"container d-flex flex-column align-items-center\">\n    <h3>Available results:</h3>\n    <b-list-group class=\"ms-2\">\n      <b-list-group-item\n        v-for=\"[key, strat] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :active=\"key === selectedBacktestResultKey\"\n        class=\"d-flex justify-content-between align-items-center py-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        {{ key }} {{ strat.total_trades }} {{ formatPercent(strat.profit_total) }}\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { formatPercent } from '@/shared/formatters';\nimport { StrategyBacktestResult } from '@/types';\n\ndefineProps({\n  backtestHistory: {\n    required: true,\n    type: Object as () => Record<string, StrategyBacktestResult>,\n  },\n  selectedBacktestResultKey: { required: false, default: '', type: String },\n});\nconst emit = defineEmits(['selectionChange']);\nconst setBacktestResult = (key) => {\n  emit('selectionChange', key);\n};\n</script>\n\n<style scoped></style>\n","<template>\n  <div>\n    <div class=\"w-100 d-flex\">\n      <b-form-select\n        id=\"freqaiModel-select\"\n        v-model=\"locFreqaiModel\"\n        :options=\"botStore.activeBot.freqaiModelList\"\n      >\n      </b-form-select>\n      <div class=\"ms-2\">\n        <b-button @click=\"botStore.activeBot.getFreqAIModelList\">\n          <i-mdi-refresh />\n        </b-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { computed, onMounted } from 'vue';\n\nconst props = defineProps({\n  modelValue: { type: String, required: true },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst locFreqaiModel = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(freqaiModel: string) {\n    emit('update:modelValue', freqaiModel);\n  },\n});\n\nonMounted(() => {\n  if (botStore.activeBot.freqaiModelList.length === 0) {\n    botStore.activeBot.getFreqAIModelList();\n  }\n});\n</script>\n","<template>\n  <div>\n    <button\n      class=\"btn btn-secondary float-end\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      <i-mdi-refresh />\n    </button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <b-list-group v-if=\"botStore.activeBot.backtestHistoryList\" class=\"ms-2\">\n      <b-list-group-item\n        v-for=\"(res, idx) in botStore.activeBot.backtestHistoryList\"\n        :key=\"idx\"\n        class=\"d-flex justify-content-between align-items-center py-1 mb-1\"\n        button\n        @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n      >\n        <strong>{{ res.strategy }}</strong>\n        backtested on: {{ timestampms(res.backtest_start_time * 1000) }}\n        <small>{{ res.filename }}</small>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted } from 'vue';\nimport { timestampms } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst botStore = useBotStore();\n\nonMounted(() => {\n  botStore.activeBot.getBacktestHistory();\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n  <div>\n    <b-list-group>\n      <b-list-group-item\n        button\n        class=\"d-flex flex-wrap justify-content-center align-items-center\"\n        :title=\"'Trade Navigation'\"\n        @click=\"sortNewestFirst = !sortNewestFirst\"\n        >Trade Navigation {{ sortNewestFirst ? '&#8595;' : '&#8593;' }}\n      </b-list-group-item>\n      <b-list-group-item\n        v-for=\"trade in sortedTrades\"\n        :key=\"trade.open_timestamp\"\n        button\n        class=\"d-flex flex-wrap justify-content-between align-items-center py-1\"\n        :title=\"`${trade.pair}`\"\n        :active=\"trade.open_timestamp === selectedTrade.open_timestamp\"\n        @click=\"onTradeSelect(trade)\"\n      >\n        <div>\n          <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\n            trade.is_short ? 'S-' : 'L-'\n          }}</span>\n          <DateTimeTZ :date=\"trade.open_timestamp\" />\n        </div>\n        <TradeProfit :trade=\"trade\" />\n        <ProfitPill\n          v-if=\"backtestMode\"\n          :profit-ratio=\"trade.profit_ratio\"\n          :stake-currency=\"botStore.activeBot.stakeCurrency\"\n        />\n      </b-list-group-item>\n      <b-list-group-item v-if=\"trades.length === 0\">No trades to show...</b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Trade } from '@/types';\nimport TradeProfit from '@/components/ftbot/TradeProfit.vue';\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { computed, ref } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Trade[] },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits(['trade-select']);\n\nconst botStore = useBotStore();\nconst selectedTrade = ref({} as Trade);\nconst sortNewestFirst = ref(true);\n\nconst onTradeSelect = (trade: Trade) => {\n  selectedTrade.value = trade;\n  emit('trade-select', trade);\n};\n\nconst sortedTrades = computed(() => {\n  return props.trades\n    .slice()\n    .sort((a, b) =>\n      sortNewestFirst.value\n        ? b.open_timestamp - a.open_timestamp\n        : a.open_timestamp - b.open_timestamp,\n    );\n});\n</script>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-11 text-start\">\n        <p>\n          Graph will always show the latest values for the selected strategy. Timerange:\n          {{ timerange }} - {{ strategy }}\n        </p>\n      </div>\n      <div class=\"col-md-1 text-end\">\n        <b-button\n          aria-label=\"Close\"\n          title=\"Trade Navigation\"\n          size=\"sm\"\n          @click=\"showRightBar = !showRightBar\"\n          >{{ showRightBar ? '&gt;' : '&lt;' }}\n        </b-button>\n      </div>\n    </div>\n    <div class=\"row text-center h-100 d-flex align-items-stretch\">\n      <PairSummary\n        class=\"col-md-2 overflow-auto\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :pairlist=\"pairlist\"\n        :trades=\"trades\"\n        sort-method=\"profit\"\n        :backtest-mode=\"true\"\n      />\n      <CandleChartContainer\n        :available-pairs=\"pairlist\"\n        :historic-view=\"!!true\"\n        :timeframe=\"timeframe\"\n        :timerange=\"timerange\"\n        :strategy=\"strategy\"\n        :trades=\"trades\"\n        :class=\"`${\n          showRightBar ? 'col-md-8' : 'col-md-10'\n        } candle-chart-container px-0 h-100 align-self-stretch`\"\n        :slider-position=\"sliderPosition\"\n        :freqai-model=\"freqaiModel\"\n      >\n      </CandleChartContainer>\n      <TradeListNav\n        v-if=\"showRightBar\"\n        class=\"overflow-auto col-md-2\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :trades=\"trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\n        @trade-select=\"navigateChartToTrade\"\n      />\n    </div>\n    <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n      <TradeList class=\"row trade-history mt-2 w-100\" :trades=\"trades\" :show-filter=\"true\" />\n    </b-card>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport TradeListNav from '@/components/ftbot/TradeListNav.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport { ref } from 'vue';\nimport { ChartSliderPosition, Trade } from '@/types';\n\ndefineProps({\n  timeframe: { required: true, type: String },\n  strategy: { required: true, type: String },\n  freqaiModel: { required: false, default: undefined, type: String },\n  timerange: { required: true, type: String },\n  pairlist: { required: true, type: Array as () => string[] },\n  trades: { required: true, type: Array as () => Trade[] },\n});\nconst botStore = useBotStore();\nconst showRightBar = ref(true);\nconst sliderPosition = ref<ChartSliderPosition>();\n\nconst navigateChartToTrade = (trade: Trade) => {\n  sliderPosition.value = {\n    startValue: trade.open_timestamp,\n    endValue: trade.close_timestamp,\n  };\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.candle-chart-container {\n  // TODO: Rough estimate - still to fix correctly\n  // Applies to all \"calc\" usages in this file.\n  height: calc(100vh - 250px) !important;\n}\n</style>\n","<template>\n  <div class=\"container-fluid\" style=\"max-height: calc(100vh - 60px)\">\n    <div class=\"container-fluid\">\n      <div class=\"row mb-2\"></div>\n      <p v-if=\"!botStore.activeBot.canRunBacktest\">\n        Bot must be in webserver mode to enable Backtesting.\n      </p>\n      <div class=\"row w-100\">\n        <h2 class=\"col-4 col-lg-3\">Backtesting</h2>\n        <div\n          class=\"col-12 col-lg-order-last col-lg-6 mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4\"\n        >\n          <b-form-radio\n            v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"historicResults\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Load Results</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"run\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Run backtest</b-form-radio\n          >\n          <b-form-radio\n            id=\"bt-analyze-btn\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"results\"\n            :disabled=\"!hasBacktestResult\"\n            >Analyze result</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize-summary\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize summary</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize result</b-form-radio\n          >\n        </div>\n        <small\n          v-show=\"botStore.activeBot.backtestRunning\"\n          class=\"text-end bt-running-label col-8 col-lg-3\"\n          >Backtest running: {{ botStore.activeBot.backtestStep }}\n          {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n        >\n      </div>\n    </div>\n\n    <div class=\"d-md-flex\">\n      <!-- Left bar -->\n      <div\n        :class=\"`${showLeftBar ? 'col-md-3' : ''} sticky-top sticky-offset me-3 d-flex flex-column`\"\n      >\n        <b-button\n          v-if=\"btFormMode !== 'visualize'\"\n          class=\"align-self-start\"\n          aria-label=\"Close\"\n          size=\"sm\"\n          @click=\"showLeftBar = !showLeftBar\"\n          >{{ showLeftBar ? '&lt;' : '&gt;' }}</b-button\n        >\n        <transition name=\"fade\" mode=\"in-out\">\n          <BacktestResultSelect\n            v-if=\"btFormMode !== 'visualize' && showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\n          />\n        </transition>\n      </div>\n      <!-- End Left bar -->\n      <div\n        v-if=\"btFormMode == 'historicResults'\"\n        class=\"flex-fill row d-flex flex-column bt-config\"\n      >\n        <backtest-history-load />\n      </div>\n      <div v-if=\"btFormMode == 'run'\" class=\"flex-fill row d-flex flex-column bt-config\">\n        <div class=\"mb-2\">\n          <span>Strategy</span>\n          <StrategySelect v-model=\"strategy\"></StrategySelect>\n        </div>\n        <b-card :disabled=\"botStore.activeBot.backtestRunning\">\n          <!-- Backtesting parameters -->\n          <b-form-group\n            label-cols-lg=\"2\"\n            label=\"Backtest params\"\n            label-size=\"sm\"\n            label-class=\"fw-bold pt-0\"\n            class=\"mb-0\"\n          >\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-select\"\n            >\n              <TimeframeSelect id=\"timeframe-select\" v-model=\"selectedTimeframe\" />\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Detail Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-detail-select\"\n              title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n            >\n              <TimeframeSelect\n                id=\"timeframe-detail-select\"\n                v-model=\"selectedDetailTimeframe\"\n                :below-timeframe=\"selectedTimeframe\"\n              />\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Max open trades:\"\n              label-align-sm=\"right\"\n              label-for=\"max-open-trades\"\n            >\n              <b-form-input\n                id=\"max-open-trades\"\n                v-model=\"maxOpenTrades\"\n                placeholder=\"Use strategy default\"\n                type=\"number\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Starting capital:\"\n              label-align-sm=\"right\"\n              label-for=\"starting-capital\"\n            >\n              <b-form-input\n                id=\"starting-capital\"\n                v-model=\"startingCapital\"\n                type=\"number\"\n                step=\"0.001\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Stake amount:\"\n              label-align-sm=\"right\"\n              label-for=\"stake-amount\"\n            >\n              <div class=\"d-flex\">\n                <b-form-checkbox\n                  id=\"stake-amount-bool\"\n                  v-model=\"stakeAmountUnlimited\"\n                  class=\"col-md-6\"\n                  >Unlimited stake</b-form-checkbox\n                >\n\n                <b-form-input\n                  id=\"stake-amount\"\n                  v-model=\"stakeAmount\"\n                  type=\"number\"\n                  placeholder=\"Use strategy default\"\n                  step=\"0.01\"\n                  :disabled=\"stakeAmountUnlimited\"\n                ></b-form-input>\n              </div>\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Enable Protections:\"\n              label-align-sm=\"right\"\n              label-for=\"enable-protections\"\n            >\n              <b-form-checkbox\n                id=\"enable-protections\"\n                v-model=\"enableProtections\"\n              ></b-form-checkbox>\n            </b-form-group>\n            <b-form-group\n              v-if=\"botStore.activeBot.botApiVersion >= 2.22\"\n              label-cols-sm=\"5\"\n              label=\"Cache Backtest results:\"\n              label-align-sm=\"right\"\n              label-for=\"enable-cache\"\n            >\n              <b-form-checkbox id=\"enable-cache\" v-model=\"allowCache\"></b-form-checkbox>\n            </b-form-group>\n            <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n              <b-form-group\n                label-cols-sm=\"5\"\n                label=\"Enable FreqAI:\"\n                label-align-sm=\"right\"\n                label-for=\"enable-freqai\"\n              >\n                <template #label>\n                  <div class=\"d-flex justify-content-center\">\n                    <span class=\"me-2\">Enable FreqAI:</span>\n                    <InfoBox\n                      hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\n                    />\n                  </div>\n                </template>\n                <b-form-checkbox id=\"enable-freqai\" v-model=\"freqAI.enabled\"></b-form-checkbox>\n              </b-form-group>\n              <b-form-group\n                v-if=\"freqAI.enabled\"\n                label-cols-sm=\"5\"\n                label=\"FreqAI identifier:\"\n                label-align-sm=\"right\"\n                label-for=\"freqai-identifier\"\n              >\n                <b-form-input\n                  id=\"freqai-identifier\"\n                  v-model=\"freqAI.identifier\"\n                  placeholder=\"Use config default\"\n                ></b-form-input>\n              </b-form-group>\n              <b-form-group\n                v-if=\"freqAI.enabled\"\n                label-cols-sm=\"5\"\n                label=\"FreqAI Model\"\n                label-align-sm=\"right\"\n                label-for=\"freqai-model\"\n              >\n                <FreqaiModelSelect id=\"freqai-model\" v-model=\"freqAI.model\"></FreqaiModelSelect>\n              </b-form-group>\n            </template>\n\n            <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\n              <b-form-input\n                id=\"fee\"\n                type=\"number\"\n                placeholder=\"Use exchange default\"\n                step=\"0.01\"\n              ></b-form-input>\n            </b-form-group> -->\n            <hr />\n            <TimeRangeSelect v-model=\"timerange\" class=\"mt-2\"></TimeRangeSelect>\n          </b-form-group>\n        </b-card>\n\n        <h3 class=\"mt-3\">Backtesting summary</h3>\n        <div\n          class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\"\n        >\n          <b-button\n            id=\"start-backtest\"\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"clickBacktest\"\n          >\n            Start backtest\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"botStore.activeBot.pollBacktest\"\n          >\n            Load backtest result\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"!botStore.activeBot.backtestRunning\"\n            @click=\"botStore.activeBot.stopBacktest\"\n            >Stop Backtest</b-button\n          >\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            @click=\"botStore.activeBot.removeBacktest\"\n            >Reset Backtest</b-button\n          >\n        </div>\n      </div>\n      <BacktestResultView\n        v-if=\"hasBacktestResult && btFormMode == 'results'\"\n        :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n        class=\"flex-fill\"\n      />\n\n      <BacktestGraphsView\n        v-if=\"hasBacktestResult && btFormMode == 'visualize-summary'\"\n        :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n      />\n    </div>\n\n    <div\n      v-if=\"hasBacktestResult && btFormMode == 'visualize'\"\n      class=\"container-fluid text-center w-100 mt-2\"\n    >\n      <BacktestResultChart\n        :timeframe=\"timeframe\"\n        :strategy=\"strategy\"\n        :timerange=\"timerange\"\n        :pairlist=\"botStore.activeBot.selectedBacktestResult.pairlist\"\n        :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n        :freqai-model=\"freqAI.enabled ? freqAI.model : undefined\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TimeRangeSelect from '@/components/ftbot/TimeRangeSelect.vue';\nimport BacktestResultView from '@/components/ftbot/BacktestResultView.vue';\nimport BacktestResultSelect from '@/components/ftbot/BacktestResultSelect.vue';\nimport StrategySelect from '@/components/ftbot/StrategySelect.vue';\nimport FreqaiModelSelect from '@/components/ftbot/FreqaiModelSelect.vue';\nimport TimeframeSelect from '@/components/ftbot/TimeframeSelect.vue';\nimport BacktestHistoryLoad from '@/components/ftbot/BacktestHistoryLoad.vue';\nimport BacktestGraphsView from '@/components/ftbot/BacktestGraphsView.vue';\nimport BacktestResultChart from '@/components/ftbot/BacktestResultChart.vue';\nimport InfoBox from '@/components/general/InfoBox.vue';\n\nimport { BacktestPayload } from '@/types';\n\nimport { formatPercent } from '@/shared/formatters';\nimport { computed, ref, onMounted, watch } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst botStore = useBotStore();\n\nconst hasBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n    : false,\n);\nconst timeframe = computed((): string => {\n  try {\n    return botStore.activeBot.selectedBacktestResult.timeframe;\n  } catch (err) {\n    return '';\n  }\n});\n\nconst strategy = ref('');\nconst selectedTimeframe = ref('');\nconst selectedDetailTimeframe = ref('');\nconst timerange = ref('');\nconst showLeftBar = ref(false);\nconst freqAI = ref({\n  enabled: false,\n  model: '',\n  identifier: '',\n});\nconst enableProtections = ref(false);\nconst stakeAmountUnlimited = ref(false);\nconst allowCache = ref(true);\nconst maxOpenTrades = ref('');\nconst stakeAmount = ref('');\nconst startingCapital = ref('');\nconst btFormMode = ref('run');\nconst pollInterval = ref<number | null>(null);\n\nconst selectBacktestResult = () => {\n  // Set parameters for this result\n  strategy.value = botStore.activeBot.selectedBacktestResult.strategy_name;\n  botStore.activeBot.getStrategy(strategy.value);\n  selectedTimeframe.value = botStore.activeBot.selectedBacktestResult.timeframe;\n  selectedDetailTimeframe.value = botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\n  timerange.value = botStore.activeBot.selectedBacktestResult.timerange;\n};\n\nwatch(\n  () => botStore.activeBot.selectedBacktestResultKey,\n  () => {\n    selectBacktestResult();\n  },\n);\n\nconst clickBacktest = () => {\n  const btPayload: BacktestPayload = {\n    strategy: strategy.value,\n    timerange: timerange.value,\n    enable_protections: enableProtections.value,\n  };\n  const openTradesInt = parseInt(maxOpenTrades.value, 10);\n  if (openTradesInt) {\n    btPayload.max_open_trades = openTradesInt;\n  }\n  if (stakeAmountUnlimited.value) {\n    btPayload.stake_amount = 'unlimited';\n  } else {\n    const stakeAmountLoc = Number(stakeAmount.value);\n    if (stakeAmountLoc) {\n      btPayload.stake_amount = stakeAmountLoc.toString();\n    }\n  }\n\n  const startingCapitalLoc = Number(startingCapital.value);\n  if (startingCapitalLoc) {\n    btPayload.dry_run_wallet = startingCapitalLoc;\n  }\n\n  if (selectedTimeframe.value) {\n    btPayload.timeframe = selectedTimeframe.value;\n  }\n  if (selectedDetailTimeframe.value) {\n    btPayload.timeframe_detail = selectedDetailTimeframe.value;\n  }\n  if (!allowCache.value) {\n    btPayload.backtest_cache = 'none';\n  }\n  if (freqAI.value.enabled) {\n    btPayload.freqaimodel = freqAI.value.model;\n    if (freqAI.value.identifier !== '') {\n      btPayload.freqai = { identifier: freqAI.value.identifier };\n    }\n  }\n\n  botStore.activeBot.startBacktest(btPayload);\n};\n\nonMounted(() => botStore.activeBot.getState());\nwatch(\n  () => botStore.activeBot.backtestRunning,\n  () => {\n    if (botStore.activeBot.backtestRunning === true) {\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n    } else if (pollInterval.value) {\n      clearInterval(pollInterval.value);\n      pollInterval.value = null;\n    }\n  },\n);\n</script>\n\n<style lang=\"scss\" scoped>\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.sticky-offset {\n  top: 2em;\n}\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["periodicBreakdownSelections","periodicBreakdownPeriod","ref","periodicBreakdownFields","computed","formatPriceStake","price","formatPrice","props","getSortedTrades","backtestResult","a","b","bestPair","trades","value","formatPercent","worstPair","backtestResultStats","shortMetrics","_a","_b","humanizeDurationFromSeconds","timestampms","backtestResultSettings","perPairFields","perExitReason","backtestResultFields","backtestsettingFields","setBacktestResult","key","emit","botStore","useBotStore","locFreqaiModel","freqaiModel","onMounted","selectedTrade","sortNewestFirst","onTradeSelect","trade","sortedTrades","showRightBar","sliderPosition","navigateChartToTrade","hasBacktestResult","timeframe","strategy","selectedTimeframe","selectedDetailTimeframe","timerange","showLeftBar","freqAI","enableProtections","stakeAmountUnlimited","allowCache","maxOpenTrades","stakeAmount","startingCapital","btFormMode","pollInterval","selectBacktestResult","watch","clickBacktest","btPayload","openTradesInt","stakeAmountLoc","startingCapitalLoc"],"mappings":"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"}